name: 'Build Image'
description: 'Builds and pushes images'
inputs: 
  image-tag-prefix: # prefix the tag with this
    description: 'IMAGE_TAG_PREFIX'
    required: false
    default: ''
  backend-dockerfile: # dockerfile for backend build
    description: 'DOCKERFILE_BACKEND'
    required: false
    default: Dockerfile.backend-container
  frontend-dockerfile: # dockerfile for frontend build
    description: 'DOCKERFILE_FRONTEND'
    required: false
    default: frontend/Dockerfile.frontend-container
  tag-version: # set to true if tagging official version
    description: 'VERSION'
    required: false
    default: false
runs:
  using: "composite"
  steps:
    - name: Set image tag prefix
      shell: bash
      run: echo "IMAGE_TAG_PREFIX=${{ inputs.image-tag-prefix }}" >> $GITHUB_ENV
    - name: Set backend dockerfile
      shell: bash
      run: echo "DOCKERFILE_BACKEND=${{ inputs.backend-dockerfile }}" >> $GITHUB_ENV
    - name: Set frontend dockerfile
      shell: bash
      run: echo "DOCKERFILE_FRONTEND=${{ inputs.frontend-dockerfile }}" >> $GITHUB_ENV

    - name: Install Golang
      uses: actions/setup-go@v5.0.0
      with:
        go-version-file: go.mod
        check-latest: true
        cache: true

    - name: Download modules
      shell: bash
      run: go mod download

    - uses: actions/setup-node@v4.0.2
      with:
        node-version: '18'

    # https://github.com/docker/setup-qemu-action
    #- name: Set up QEMU
    #  uses: docker/setup-qemu-action@v3
    # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Download modules
      shell: bash
      run: go mod download

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4.0.0
      with:
        version: v1.57.2
        args: --timeout 7m

    # set repo and GITHUB SHA 
    - name: Set github commit id
      shell: bash
      run: echo "GITHUB_SHA=$GITHUB_SHA" >> $GITHUB_ENV      
    - name: Set release repo
      shell: bash
      run: echo "REPO=ghcr.io/${{ github.repository_owner }}" >> $GITHUB_ENV
    # override version with GITHUB_SHA if tag-version set to false
    # this way only GITHUBSHA is tagged with this build
    - name: Override version if not official build
      shell: bash
      if: ${{ inputs.tag-version == 'false' }}
      run: echo "VERSION=$GITHUB_SHA" >> $GITHUB_ENV

    # build and push images tagged with GITHUB_SHA, version
    - name: Build and push tornjak images
      shell: bash
      run: make release-images

