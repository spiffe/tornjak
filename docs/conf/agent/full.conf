server {
  # location of SPIRE socket
  # here, set to default SPIRE socket path
  spire_socket_path = "unix:///tmp/spire-server/private/api.sock"

  ### BEGIN SERVER CONNECTION CONFIGURATION ###
  # Note: at least one of http, tls, and mtls must be configured
  # The server can open multiple if multiple sections included
  # The server only ends when all connections error

  # [required] configure HTTP connection to Tornjak server
  http {
    port = 10000 # container port for HTTP connection
  }

  # [optional, recommended] configure HTTPS connection to Tornjak server
  https {
    port = 10443                  # [required for HTTPS] container port for HTTPS connection
    cert = "sample-keys/tls.pem"  # [required for HTTPS] TLS cert
    key = "sample-keys/key.pem"   # [required for HTTPS] TLS key
    client_ca = "sample-keys/rootCA.pem" # enables mTLS connection for HTTPS port
  }

  ### END SERVER CONNECTION CONFIGURATION ###
}

plugins {

  ### BEGIN DATASTORE PLUGIN CONFIGURATION ###

  # Configure SQL local database for Tornjak
  DataStore "sql" {
    plugin_data {
      drivername = "sqlite3"
      filename = "tornjak.sqlite3" # location of database
    }
  }

  ### END DATASTORE PLUGIN CONFIGURATION

  ### BEGIN IAM PLUGIN CONFIGURATION ###
  # Note: if no UserManagement configuration included, authentication treated as noop

  # This plugin will extract roles from `realm_access.roles` in the JWT and pass
  # to the authorization layer as user roles.
  Authenticator "Keycloak" {
    plugin_data {
      # issuer - Issuer URL for OIDC
      # here is a sample for Keycloak running locally on Minikube
      issuer = "http://host.docker.internal:8080/realms/tornjak"
      # for cloud deployment it would be something like:
      # issuer = "http://<ingress_access>/realms/tornjak"

      # audience - expected value for aud claim in JWT
      # if not included or set, there will be no audience check
      # recommended to ensure JWT was meant for Tornjak Backend resource server
      audience = "tornjak-backend"
    }
  }

  # This policy requires admin role for all write calls, viewer role for all read calls
  # and authentication success for the "/" api
  Authorizer "RBAC" {
    plugin_data {
      name = "Admin Viewer Policy"
      role "admin" { desc = "admin person" }
      role "viewer" { desc = "viewer person" }
      # this special character role is reserved for allowing all authenticated persons
      role "" { desc = "authenticated person" }

      # home tornjak backend api allowed with any successful authentication
      API "/" { allowed_roles = [""] }
      # allowed with successful authentication and either admin or viewer role
      API "/api/healthcheck" { allowed_roles = ["admin", "viewer"] }
      API "/api/debugserver" { allowed_roles = ["admin", "viewer"] }
      API "/api/agent/list" { allowed_roles = ["admin", "viewer"] }
      API "/api/entry/list" { allowed_roles = ["admin", "viewer"] }
      API "/api/tornjak/serverinfo" { allowed_roles = ["admin", "viewer"] }
      API "/api/tornjak/selectors/list" { allowed_roles = ["admin", "viewer"] }
      API "/api/tornjak/agents/list" { allowed_roles = ["admin", "viewer"] }
      API "/api/tornjak/clusters/list" { allowed_roles = ["admin", "viewer"] }
      # allowed with successful authentication and admin role
      API "/api/agent/ban" { allowed_roles = ["admin"] }
      API "/api/agent/delete" { allowed_roles = ["admin"] }
      API "/api/agent/createjointoken" { allowed_roles = ["admin"] }
      API "/api/entry/create" { allowed_roles = ["admin"] }
      API "/api/entry/delete" { allowed_roles = ["admin"] }
      API "/api/tornjak/selectors/register" { allowed_roles = ["admin"] }
      API "/api/tornjak/clusters/create" { allowed_roles = ["admin"] }
      API "/api/tornjak/clusters/edit" { allowed_roles = ["admin"] }
      API "/api/tornjak/clusters/delete" { allowed_roles = ["admin"] }

      APIv1 "GET /api/v1/spire/serverinfo" { allowed_roles = ["admin", "viewer"] }
      APIv1 "GET /api/v1/spire/healthcheck" { allowed_roles = ["admin", "viewer"] }
      APIv1 "GET /api/v1/spire/agents" { allowed_roles = ["admin", "viewer"] }
      APIv1 "DELETE /api/v1/spire/agents" { allowed_roles = ["admin"] }
      APIv1 "POST /api/v1/spire/agents/ban" { allowed_roles = ["admin"] }
      APIv1 "POST /api/v1/spire/agents/jointoken" { allowed_roles = ["admin"] }
      APIv1 "GET /api/v1/spire/entries" { allowed_roles = ["admin", "viewer"] }
      APIv1 "POST /api/v1/spire/entries" { allowed_roles = ["admin"] }
      APIv1 "DELETE /api/v1/spire/entries" { allowed_roles = ["admin"] }

      # SPIRE Federation API calls
      APIv1 "GET /api/v1/spire/bundle" { allowed_roles = ["admin", "viewer"] }
      APIv1 "GET /api/v1/spire/federations/bundles" { allowed_roles = ["admin", "viewer"] }
      APIv1 "POST /api/v1/spire/federations/bundles" { allowed_roles = ["admin"] }
      APIv1 "PATCH /api/v1/spire/federations/bundles" { allowed_roles = ["admin"] }
      APIv1 "DELETE /api/v1/spire/federations/bundles" { allowed_roles = ["admin"] }

      # Tornjak API calls
      APIv1 "GET /api/v1/tornjak/serverinfo" { allowed_roles = ["admin", "viewer"] }
      APIv1 "GET /api/v1/tornjak/agents" { allowed_roles = ["admin", "viewer"] }
      APIv1 "POST /api/v1/tornjak/selectors" { allowed_roles = ["admin"] }
      APIv1 "GET /api/v1/tornjak/selectors" { allowed_roles = ["admin", "viewer"] }
      APIv1 "GET /api/v1/tornjak/clusters" { allowed_roles = ["admin", "viewer"] }
      APIv1 "POST /api/v1/tornjak/clusters" { allowed_roles = ["admin"] }
      APIv1 "PATCH /api/v1/tornjak/clusters" { allowed_roles = ["admin"] }
      APIv1 "DELETE /api/v1/tornjak/clusters" { allowed_roles = ["admin"] }
    }
  }

  ### END IAM PLUGIN CONFIGURATION


}
